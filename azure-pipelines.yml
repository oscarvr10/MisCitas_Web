# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  - main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '21530841-bcd1-4c0c-82a8-0b9d1e470115'

  # Web app name
  webAppName: 'test-appointments'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'test-appointments'

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)
  
stages:
  - stage: Build
    displayName: Build stage
    variables:
      phpVersion: "7.3"
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            workingDirectory: $(rootFolder)
            displayName: "Use PHP version $(phpVersion)"            
          
          - script: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
            workingDirectory: $(rootFolder)
            displayName: 'Composer install'
          
          - script: |
              cp .env.example .env
              php artisan key:generate --force
            displayName: "Running Laravel config & optimizations"
          
          - task: AzureMysqlDeployment@1
            displayName: 'Execute Azure MySQL'
            inputs:
                  ConnectedServiceName: $(azureSubscription)
                  ServerName: $(ServerName)
                  DatabaseName: 
                  SqlUsername: $(SqlUserName)
                  SqlPassword: $(SqlPassword)
                  TaskNameSelector: InlineSqlTask
                  SqlInline: 'CREATE DATABASE IF NOT EXISTS myAppointments;'
                  IpDetectionMethod: 'AutoDetect'
                    
#Run on WebSSH from Azure App Service: 
# php artisan migrate:refresh --seed --env=production --force --no-interaction
# php artisan passport:install

#####################################
#Run CRON on WebSSH from Azure App Service:
#1. apt-get update -qq 
#2. apt-get install cron -yqq (only if cron service is not installed yet)
#3. service cron start
#4. crontab -e
#5.  * * * * * cd /home/site/wwwroot && php artisan schedule:run >> /dev/null 2>&1
#5(other option if above doesn't work). * * * * * cd /var/www/html/wwwroot && php artisan schedule:run >> /dev/null 2>&1
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(rootFolder)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
      
          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Upload package'
            artifact: drop        
  - stage: Deploy
    displayName: 'Deploy Web App'
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: DeploymentJob
      pool:
        vmImage: $(vmImageName)
      environment: $(environmentName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App : test-appointments'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(webAppName)
                package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip